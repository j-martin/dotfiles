#!/usr/bin/env bash

# Installation command:
# curl https://raw.githubusercontent.com/j-martin/dotfiles/master/.bin/kctl | bash -s -- install

set -o errexit
set -o pipefail
set -u

IFS=$'\n\t'
KCTL_URL='https://raw.githubusercontent.com/j-martin/dotfiles/master/.bin/kctl'

_info() {
  echo >&2 "[info] $*"
}

_fatal() {
  local message="$1"
  local code="${2:-255}"
  echo >&2 "[fatal] ${message} Exit code: ${code}"
  exit "${code}"
}

_background_red() {
  # iTerm escape code to turn the terminal red.
  printf "\033]Ph501010\033\\" >&2
  "$@"
}

_background_orange() {
  printf "\033]Ph403010\033\\" >&2
  "$@"
}

_background_safe() {
  printf "\033]1337;SetProfile=Default\a" >&2
}

_show_current_context() {
  local message_prefix="${1}"

  local context
  context="$(__k8s_current_context)"
  case "${context}" in
    *dev*)
      _background_safe
      ;;
    *staging* | *demo*)
      _info 'Staging environment found. Switching background to orange in iTerm. Use "kctl safe" to reset your terminal color when you are done.'
      _background_orange
      ;;
    *)
      _info 'Assuming this is a production cluster. Switching background to red in iTerm. Use "kctl safe" to reset your terminal color when you are done.'
      _background_red
      ;;
  esac

  _info "${message_prefix} on ${context}"
}

__k8s_current_context() {
  kubectl config view --minify --output json \
    | jq -r '.contexts[0].context | "cluster: \(.cluster) namespace: \(.namespace)"'
}

_kubectl() {
  _show_current_context "Running 'kubectl $(tr -d '\n' <<< "$@")'"
  kubectl "$@"
}

_gcp_k8s_auth() {
  local project="${1:-}"
  if [[ -z "${project}" ]]; then
    _fatal 'Please specify the project.'
  fi
  gcloud container clusters list --project "${project}" --format json \
    | jq -r '.[] | "\(.name)  --zone \(.zone)"' \
    | xargs -n3 gcloud container clusters get-credentials --project "${project}"
}

_fzf_pick() {
  local query="$1"
  fzf -0 -1 --header-lines=1 --query "'${query}" \
    | awk '{print $1}' || {
    _fatal "Could not find '${query}'"
  }
}

_k8s_pick_resource() {
  local resource_type="$1"
  local resource="$2"
  _kubectl get "${resource_type}" | _fzf_pick "${resource}"
}

_k8s_command_pick_resource() {
  local command="$1"
  local resource_type="$2"
  local resource="${3:-}"
  if [[ "${resource}" == 'all' ]]; then
    _kubectl "${command}" "${resource_type}" "${@:4}"
  else
    _kubectl "${command}" "${resource_type}" "$(_k8s_pick_resource "${resource_type}" "${resource}")" "${@:4}"
  fi
}

_k8s_pick_pod() {
  _k8s_pick_resource 'pod' "$@"
}

_k8s_switch_cluster() {
  local context="${1:-}"
  local namespace="${2:-}"
  local pod="${3:-}"
  context="$(
    _kubectl config get-contexts \
      | fzf -0 -1 --header-lines=1 --query "'${context}" \
      | awk '{print $2}'
  )"

  kubectl config use-context "${context}"
  _show_current_context "Now"

  if [[ -n "${namespace}" ]]; then
    _k8s_switch_namespace "${namespace}"
  fi
  if [[ -n "${pod}" ]]; then
    _k8s_exec "${pod}"
  fi
}

_k8s_switch_namespace() {
  local namespace="${1:-}"
  namespace="$(_k8s_pick_resource namespace "${namespace}")"
  _info "Switching namespace to: ${namespace}..."
  _kubectl config set-context --current --namespace="${namespace}"
  _info "Now using ${namespace}..."
}

_k8s_exec() {
  local pod="${1:-}"
  pod="$(_k8s_pick_pod "${pod}")"
  _kubectl exec -it "${pod}" "${2:-/bin/bash}" "${@:3}"
}

_k8s_logs() {
  __k8s_logs "${1:-}" "${@:2}" --all-containers --follow=true --tail=100
}

__k8s_logs() {
  local pod="${1:-}"
  _kubectl logs "$(_k8s_pick_pod "${pod}")" "${@:2}"
}

_install() {
  local bin_path='/usr/local/bin/kctl'
  _info "Installing or upgrading kctl from '${KCTL_URL}'..."
  sudo curl "${KCTL_URL}" --silent --output "${bin_path}"
  sudo chmod +x "${bin_path}"
  _info "kctl has been installed '${KCTL_URL}'!"
}

_usage() {
  cat >&2 << EOF
USAGE: $0 COMMANDS [OPTIONS]...

Wrapper around kubectl.

A RESOURCE_TYPE is a pod, a deployment, service, etc.

COMMANDS:
EOF

  grep --extended-regexp '^    [[:alnum:]-]+.*)' "$0" \
    | sed 's/^  //; s/ |/,/g; s/)//; s/# //'
}

_main() {
  local key="${1:-}"
  shift || true
  case "${key}" in
    "" | -h | --help | h | help) # Show help/usage.
      _usage
      exit 0
      ;;
    auth) # [PROJECT] Authenticate/add all cluster in the specified project.
      _gcp_k8s_auth "$@"
      ;;
    s | safe) # Resets iTerm background color. Use this if you were working on a staging or production cluster and want the default color back.
      _info 'Reseting to default background / profile.'
      _background_safe
      ;;
    d | describe) # RESOURCE_TYPE [RESOURCE_NAME] Describe the chosen resource. Will list resources if there no exact match or no resource passed.
      _k8s_command_pick_resource describe "$@"
      ;;
    dp | describe-pod) # [POD_NAME] Describe the chosen pod. Will list pods if there no exact match or no pods passed.
      _k8s_command_pick_resource describe pods "$@"
      ;;
    ed | edit) # RESOURCE_TYPE [RESOURCE_NAME] Edit the chosen resource. Will list resources if there no exact match or no resource passed.
      _k8s_command_pick_resource edit "$@"
      ;;
    e | exec) # [POD_NAME] Run bash or other command on pod. Will list pods if there no exact match or no resource passed.
      _k8s_exec "$@"
      ;;
    g | get) # ARGS kubectl get ...
      _kubectl get "$@"
      ;;
    gr | get-resource) # [RESOURCE_TYPE] Get all resource. Will list resource types if there no exact match or no resource passed.
      _kubectl get "$(_kubectl api-resources | _fzf_pick "${1:-}")"
      ;;
    gry | get-resource-yaml) # [RESOURCE_TYPE] Get all resource as yaml for a specific resource type. Will list resource types if there no exact match or no resource passed.
      _k8s_command_pick_resource get "$(_kubectl api-resources | _fzf_pick "${1:-}")" "${2:-}" "${@:3}" --output=yaml
      ;;
    gy | get-yaml) # RESOURCE_TYPE [RESOURCE_NAME] Get yaml output of the chosen resource. Will list resources if there no exact match or no resource passed.
      _k8s_command_pick_resource get "$1" "${2:-}" "${@:3}" --output=yaml
      ;;
    install | update) # Install or update kctl
      _install
      ;;
    l | logs) # [POD] Watch logs for all containers in pod.
      _k8s_logs "$@"
      ;;
    sc | switch-cluster) # [CLUSTER/CONTEXT] [NAMESPACE] [POD] Will list clusters/contexts if there no exact match or no cluster is passed. If the namespace is passed then it will try to switch to that namespace as well. If a pod is defined it will run exec on it.
      _k8s_switch_cluster "$@"
      ;;
    sn | switch-namespace) # [NAMESPACE] Will list namespace if there no exact match or no namespace is passed.
      _k8s_switch_namespace "$@"
      ;;
    w | watch)
      _show_current_context 'Watching...'
      watch kubectl get "$@"
      ;;
    wp)
      _show_current_context 'Watching pods'
      watch kubectl get pod "$@"
      ;;
    --) # ARGS   Pass arguments directly to kubectl
      _kubectl "$@"
      ;;
    *) # ARGS   Pass arguments directly to kubectl
      _kubectl "${key}" "$@"
      ;;
  esac
}

_main "$@"
