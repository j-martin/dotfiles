#!/usr/bin/env bash

CIRCLE_URL="https://circleci.com/gh"
GITHUB_URL='https://github.com'

# Aliases Helpers
alias sp='source $HOME/.base'
alias alia='ec $HOME/.aliases && sp'
alias aliap='ec $HOME/.private/profile && sp'
ali() {
  sp
  (
    alias
    typeset -f | grep '^\w.*() {' | sed 's/ () {//'
  ) | grep "$@" | sort
}

# Editor
alias vi='nvim'
alias v='nvim'
alias nv='nvim'
alias vf='_with_fzf nvim'
alias sf='_with_fzf subl'
alias et='emacsclient --tty'
alias e='_with_fzf "ec"'
alias etf='_with_fzf "emacsclient --tty"'

ett() {
  local file="$1"
  _touch "${file}"
  ec "${file}"
}

ea() {
  ec $(ag "$@" | fzf -0 -1 | awk -F: '{print "+" $2 " " $1}')
}

# ZSH Specific
if [ -n "$ZSH_VERSION" ]; then
  alias -g G='| grep -i -E'
  alias -g V='| grep -v -i -E'
  alias -g F='"$(fzf)"'
  alias -g L='| less -SRi'
  alias -g LL='2>&1 | less -SRi'
  alias -g T='"${TMPDIR}temp"'
  alias -g P='pbpaste |'
  alias -g C='| _pbcopy'
  alias -g BR='"$(_git_current_branch)"'
  alias -g H='"$(git rev-parse HEAD)"'
fi

alias S=_safe

# Quick edit
alias eco='_with_fzf "ec" ".conf$" '
alias esc='_with_fzf "ec" ".scala$" '
alias ej='_with_fzf "ec" ".java$" '
alias esb='_with_fzf "ec" ".sbt$" '
alias epy='_with_fzf "ec" ".py$" '
alias esh='_with_fzf "ec" ".sh$" '
alias ejs='_with_fzf "ec" ".js$" '
alias ejo='_with_fzf "ec" ".json$" '
alias exm='_with_fzf "ec" ".xml$" '
alias eo='ec --eval "(jm/helm-org-dir)"'

# Navigation
alias cw='cd $WORK'
alias cj='$HOME/code/j-martin'
alias co='$HOME/code/others'

# Sublime
alias st='subl'
alias stt='subl ./' # Depends on the 'st' command in the ~/.bin dir.

# Convenience
agl() { ag --color --after=4 --path-to-ignore ~/.agignore "$@" | less -SRi; }
ags() { ag --color --after=4 --smart-case --path-to-ignore ~/.agignore "$@" | less -SRi; }
alias uu=_rg
alias uc=_rg_cased
agm() { ag --color --after=20 --literal "<<<<<<<" | less -SRi; } #Forgotten merge conflicts
alias b=bat
alias ba='_with_fzf bat'
alias cay='cal -y'
alias clf='clf -c'
alias ca='_with_fzf cat'
cdp() {
  local file_path
  file_path="$(pbpaste)"
  cd "${file_path}"  2> /dev/null || cd "$(dirname "${file_path}")"
}
alias cf='cd "$(dirname "$(fzf)")"'
alias comp='_notify "Done!"'
alias digg='dig +noall +answer'
alias dk='docker'
alias de=_docker_exec
alias dkp='docker ps'
dki() { docker images | awk '{print $1 ":" $2}' | sort -u; }
alias dksync='bash -c "podman machine ssh date -s \"$(date -I seconds)\""'
alias dc='_load_dot_env && docker-compose'
alias dm='docker-machine'
dbuild() {
  local name="$(basename "$(pwd)")"
  local image="$(_docker_pick_images ${name:0:5} || _docker_pick_images)"
  docker build -t "$image" . && docker run -it "$image"
}
dlog() { docker logs -f "$(_docker_pick_container $1)"; }
drun() { docker run -it "$(_docker_pick_images $1)" bash; }
drunb() { docker run --entrypoint='/bin/bash' -it "$(_docker_pick_images $1)"; }
dbash() { docker exec -it "$(_docker_pick_container $1)" bash; }
dsh() { docker exec -it "$(_docker_pick_container $1)" sh; }
dkill() { docker kill "$(_docker_pick_container $1)"; }

alias dkillall='docker ps -q | xargs -r docker kill'
alias drmiall='docker images -q | xargs -r docker rmi -f'
alias dkcleanup='gum confirm "Delete all containers and volumes?" && docker rm -f $(docker ps -a -q) && docker volume rm $(docker volume ls -q)'
alias dtest='docker build -t $(basename $(pwd)) . && docker run -it $(basename $(pwd))'
alias epoch='date +%s000'
alias ep='pbpaste | $HOME/.bin/ep.py'
alias flushdns='sudo killall -HUP mDNSResponder'
alias gist='gist -p'
alias goo='google ' # Depends on ZSH google plugin.
alias hey="growlnotify 'Command Done!' -m 'Yes!'"
alias hi='history | grep '
alias hosts='sudo vi /etc/hosts'
alias hsl='grep key "$HOME/.hammerspoon/bindings.lua"'
jqx() { jq . -C "$@" | less -SRi; }
alias jq-serialized='jq -R -s .'
alias jqc='pbpaste | jq .'
alias jqcl='pbpaste | jq -C . | less -SRi'
jq-paths() {
  jq -r 'select(objects) |= [.] | map(paths(scalars)) | map(map(select(numbers)="[]") | join(".")) | unique[]' "$@" | sed 's/^/./'
}
alias ip='ifconfig | grep "inet 1"'
idiff() { icdiff "$1" "$2" | less -SRi; }
idif() { icdiff "$(fzf -q $1)" "$(fzf -q $2)" | less -SRi; }

alias o=orb

for lang in go typescript markdown python yaml json bash; do
  alias b${lang:0:1}="bat --language '${lang}'"
done

if [ -n "$ZSH_VERSION" ]; then
  alias -g Y='| bat --language yaml'
  for lang in go TYPESCRIPT MARKDOWN PYTHON YAML JSON BASH; do
    alias -g B${lang:0:1}="| bat --language '${lang}'"
  done
fi

alias lc=bat
alias lcf='_with_fzf "lc"'
alias lde='_load_dot_env'
alias le='less -SRi'
alias lf='_with_fzf cat | less -SRi'
alias ler='less README.md'
alias vir='$EDITOR README.md'
vme() {
  $EDITOR "$1" &
  vmd "$1"
}
alias vms='EDITOR=subl vme'
alias vmr='EDITOR=subl vme README.md'
alias yml2json="python3 -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' <"
alias emr='EDITOR=ec vme README.md'
alias lo='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'
alias no='e ~/.org/MAIN.org'
alias noisy='pkill -f Noisy && open -a /Applications/NoisyTyper.app'
alias m='make'
alias ml='make -f Makefile.docker'
alias myip='tail -n10 ~/.ip_history; { gdate "+%Y-%m-%dT%H:%M:%S" | tr "\n" ",";  for ip in 6 4; do; curl --silent "-${ip}" https://ifconfig.co | tr "\n" ","; done; echo } | tee -a ~/.ip_history'
alias opb='open "$(pbpaste)"'
alias opd='open "$(basename "$(pbpaste)")"'
alias pwdc='pwd | tr -d "\n" | pbcopy'
alias pbclean='echo | pbcopy'
alias rand='openssl rand -base64 128 | tr -d "\n/+="'
alias redis="(mkdir -p /tmp/redis && cd /tmp/redis && redis-server &)"
alias redis-flush='redis-cli flushall'
s() {
  ssh -t "$@" tmux -CC new -A -s "${USER}"
}
alias t=task
alias tmp='cd "$(mktemp -d -t "jm-$(gdate -u +"%Y-%m-%dT%H-%M-%SZ")")"'
alias tff='tree -afC -I "\.git|.idea|venv|vendor|pkg|target|targets|node_modules"'
alias tfs='tree -afC -I "\.git|.idea|venv|vendor|pkg|target|targets|node_modules" "src"'
alias treef='tree -fa | grep -i'
alias touch='_touch'
alias updatedb='sudo /usr/libexec/locate.updatedb'
alias ur='_utc_range'

alias vimrc='vi $HOME/.vimrc'
alias zshrc='vi $HOME/.zshrc'
alias xargsn='perl -p -e "s/\n/\0/;" | xargs -0'
cb() { open "$(_chrome_parse_bookmarks | _fzf \"$1\" | cut -d '|' -f1)"; }

# Formatting
alias shfmt='shfmt --indent 2 --binary-next-line --list --diff --case-indent --space-redirects --write'

# GCP
unalias gcp
alias bq='PATH="~/.pyenv/versions/3.7.8/bin/:$PATH" \bq'
alias gg='gcloud'
alias ggl='gcloud auth login'
alias s3='gsutil'

# K8s
alias k=kctl
alias mk=minikube
alias kg='kctl get'
alias ksn='kctl switch-namespace'
alias ke='kctl exec'
alias kct=kubectx
alias kns=kubens
alias kd='kctl describe'
alias kl='kctl logs'

## Git

alias gl='git pull --tags --force'
alias ghd='gh dash'
# TODO: Use git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
alias gbc='_git_current_branch | _pbcopy'
alias gbclean='git fetch --all --prune && git branch | grep -v "^*" | grep -v "^$(__git_get_default_branch_name)$" | fzf -m | xargs git branch -D'
alias gbcleanall='git fetch --all --prune && git branch | grep -v "^*" | grep -v "^$(__git_get_default_branch_name)$" | xargs git branch -D'
alias gbp='_git_pick_any_branches | _copy'
alias gcm='git checkout "$(__git_get_default_branch_name)"'
alias gcml='git checkout "$(__git_get_default_branch_name)" && git pull'
alias gc-='git checkout -'
alias gca='git commit --amend'
alias gcaa='git commit . --amend'
alias gccc='git rev-parse HEAD | _pbcopy'
alias gcl='_git_clone'
git-reflog-grep() {
  git reflog | awk '{print $1}' | while read in; do
    echo "$in"
    git show "$in" | grep "$@"
  done
}
alias gdel=_git_delete_commit
alias gclon='git clone "$(_github_pick_repo)"'
alias gcane='git commit --amend --no-edit -n'
alias gfo='git fetch origin --tags --force'
alias gdpb='git diff | pbcopy'
alias gdff='git icdiff | less -SRi'
alias gdfff='git diff --color | diff-so-fancy | less -SRi'
alias gdf='git diff -- "$(fzf)"'
alias gdom='git diff origin/master'
alias gpom='git fetch origin && git pull --rebase origin HEAD'
alias gpomtheirs='git pull --rebase --strategy recursive --strategy-option theirs origin HEAD'
alias gw='_git_switch_worktree'
alias gwf='$(git worktree list | fzf | _pick_first_col)'
gcof() { git checkout "$(_git_pick_branch_no_origin "'$1")"; }
alias gocf=gcof
alias gcoh='git checkout HEAD^'
alias gsp='git show "$(_git_pick_branch):$(fzf)"'
alias gdp='git diff "$(_git_pick_branch)" -- "$(fzf)"'
alias gdcf='git diff "$(_git_pick_commit)" -- "$(fzf)"'
alias gci='_github_create_issue'
alias gshowf='git show "$(_git_pick_commit):$(fzf)" | pygmentize | less -SRi'
gshow() { git show "$1:$2" | vi -; }
gshowm() { git show "origin/HEAD:$1" | vi -; }
alias gcleanx='git clean --force -dx --exclude .idea --exclude "*.iml"'
alias gclone='_git_clone'
alias ggh='git rev-parse HEAD | tr -d "\n" | _pbcopy'
alias gwip='(git log --oneline $(__git_get_default_branch_name)..HEAD | grep -ei wip) || echo "ok"'
alias groot='cd "$(git rev-parse --show-toplevel)"'
alias groo='groot'
alias gcf='git commit --fixup "$(git log --oneline | fzf --no-sort | awk "{print \$1}")"'
alias gcp='git add -p && git commit' # Commiting part of a file.
__git_push() {
  local current_branch
  current_branch="$(_git_current_branch)"
  if [[ "${current_branch}" == 'master' ]] ||  [[ "${current_branch}" == 'main' ]]; then
    _info "Do not push to ${current_branch}"
    return 1
  fi
  git push --no-verify "$@"
}
alias gp=__git_push
alias gpfl='__git_push --force-with-lease --no-verify'
alias gpp='__git_push --set-upstream origin $(git symbolic-ref --short -q HEAD)'
alias ghbp='gpp && hbp'
alias ghpr='gpp && _github_pr'
alias ghprr='gpp && _github_pr_with_reviewer'
alias ghprmsg='_git_get_pr_message | _pbcopy'
alias ghprm='git pull && git push && gh pr merge "$(_git_current_branch)" --rebase'
alias ghpro='open "$(_github_pr_url)"'
alias ghprc='_pbcopy <<< "$(_github_pr_url)"'
ghprs() { gh pr status --json "statusCheckRollup" | jq '.currentBranch.statusCheckRollup[] | "\(.state) \(.targetUrl)"' -r ;}
alias ghw='watch -n10 github-events'
alias gpick='git cherry-pick'
alias gcv='git commit -v' # Commit all with a Diff view.
alias gds='git diff --stat'
alias gdo='git diff origin/HEAD'
alias gdc='git diff --cached'
alias gdos='git diff origin/HEAD --stat'
alias gkap='gitk --all --date-order $(git log -g --pretty=%H)'
alias gll='git log -p'
alias glf='git log -p -- "$(_fzf)"'
alias glgg='git log --graph --decorate'
alias gllg="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gmc='git commit -vnm'
alias gmcp='_git_copy_last_commit'
# alias gms='bub workflow commit'
alias gms="_git_commit_with_issue_key"
gmss() { git commit --message "squashme $1" "${@:2}"; }
gmsm() { git commit --message "merge with $1" "${@}"; }
alias gm='git machete'
alias gma='git merge --abort'
alias gmom='git fetch origin && git merge origin/HEAD'
alias gmt='git read-tree -u -m' # merge/squash changes without a commit
alias gn='_git_new_branch'
alias gns='_git_new_branch'
alias gnc='_git_new_branch_and_commit'
alias gncp='_git_new_branch_from_commit'
alias gnh='_github_new_branch'
alias gnp='_git_new_branch "$(pbpaste)"'
alias grh='git reset HEAD^'
alias mg='mass git'
alias gnewic='_git_new_branch_and_commit_from_new_issue'
alias gnewm='git checkout $(__git_get_default_branch_name) && git pull && gnew'
alias gra='git rebase --abort'
alias grl='git reflog --date=iso'
alias grc='git rebase --continue'
alias greset='git fetch origin && git reset --hard origin/HEAD'
alias gri='git rebase --autosquash -i'
alias gro='git rebase --autosquash -i $(__git_get_default_branch_name)'
alias grom='git rebase --autosquash -i origin/HEAD'
alias gorm=grom
alias gs='git status'
alias gsa='git stash apply'
alias gsl='git stash list'
alias gss='git stash save'
alias gu='_github_open_url'
alias gupd='git stash && git pull --rebase origin HEAD && git stash apply && git stash drop'
gvbump() { git commit -m "bump to version $(awk '{print $3}' version.sbt)" version.sbt; }
alias ge="emacsclient --no-wait --eval '(magit-status)' && osascript -e 'tell application \"Emacs\" to activate'"

# Github
alias ha='open "$GITHUB_URL"'
alias hpo='open "$GITHUB_URL/$(_git_repo)/pulls"'
alias hc='_github_open_commit'
alias hca='open "$GITHUB_URL/$(_git_repo)/actions"'
alias hcc='_github_copy_commit_url'
alias hck='_github_open_check'
alias hp='_github_open_pr_for_commit'
alias hpc='_github_copy_pr_url_for_commit'
alias hb='open "$GITHUB_URL/$(_git_repo)/tree/$(_git_current_branch_url)"'
alias hbp='open "$GITHUB_URL/$(_git_repo)/pull/new/$(_git_current_branch_url)"'
alias hpr='_github_pr'
alias hprr='_github_pr_with_reviewer'
alias hbs='open "$GITHUB_URL/$(_git_repo)/branches"'
alias his='open "$GITHUB_URL/$(_git_repo)/issues"'
alias hw='open "$GITHUB_URL/$(_git_repo)/wiki"'
alias hr='open "$GITHUB_URL/$(_git_repo)"'

# General
# json-pretty() { jq . "$1" | sponge "$1" }
alias ic=imgcat
fn() { find . -iname "*$@*"; }
fne() { find . -iname "*.$@"; }
alias cpb='cd $(dirname "$(pbpaste)")'
alias kb='keybase'
alias psa='ps aux | grep -i'
whichl() { ls -lha "$(where $1)"; }
wh=which
alias listen='osqueryi "select l.address, l.port, p.pid, p.path from listening_ports l, processes p where l.pid = p.pid order by p.name"'
alias ports='lsof -nP +c 15 | grep LISTEN'
alias safe=_safe

# Emacs
alias emacs-clean="find ~/.emacs.d -name '*.elc' -delete"
alias emacs-stop='kill -USR1 $(pgrep Emacs)'
emacs-rebuild-eshell-alias() {
  alias | sed "s/='/ /; s/'$//; s/^/alias /" > ~/.emacs.d/.cache/eshell/alias
}

# Mac Specific
if [[ "$(uname)" == 'Darwin' ]]; then
  alias which='where'
  # Fixes keyring access to the keychain.
  alias sign-venv='codesign -f -s - "$(pipenv --venv)/bin/python"'
  alias remove-attrs="find . -exec xattr -c '{}' \;"
  alias brwe=brew
fi

alias da='date && date -u'
alias qrc='pbpaste | qr'
alias pgcli='echo $PGHOST && pgcli'

# Home/.files
alias home='git --work-tree=$HOME --git-dir=$HOME/.files.git'
alias h=home
alias hd='home diff'
alias hdf='home icdiff'
hadd() {
  echo "$*" | grep -vi '.org\|.config\|.private\|work\|Dropbox' && home add -f "$@"
}
alias hms='home commit -m'
alias hlog='home log -p'
alias hdot='open https://github.com/j-martin/dotfiles'
alias hs='home status'
he() {
  (cd "$HOME" && home ls-files | e "$@")
}
# Languages
alias scal='scala -Dscala.color'
agsbt() { agq "$@" -a --depth 2 ./*.{sbt,scala}; }
alias groov="groovyConsole > /dev/null &"
alias yar='nvm install && yarn'
alias tf=terraform

alias gr='./gradlew'

# AWS
alias ec2d='aws ec2 describe-instances | jq -C . | less -SRi'
ec2ip() { jq ".Reservations[].Instances[] | select((.PrivateIpAddress == \"$1\" or .PublicIpAddress == \"$1\"))"; }
alias r53="aws route53 list-hosted-zones | jq '.HostedZones[].Id' | xargs -n1 -P0 aws route53 list-resource-record-sets --hosted-zone-id --output text | grep"

# GCP
alias gmachine='gcloud compute machine-types list'

# Python Aliases
alias ipy='ipython3'
alias ipyn='ipython3 notebook'
alias py='python3'
alias pr='poetry run'
alias pip-conflict-formatter="pbpaste | sed 's/RequirementInformation/\n/g; s/(requirement=SpecifierRequirement/\n/g; s/from/\n/g; s/, parent=LinkCandidate(/\n/g; s/extras=frozenset({/\n/g; s/})))/\n\n/g'"

# Website
alias oo='open $(pbpaste)'
alias c2='open "https://console.aws.amazon.com/ec2/"'

# Brew
alias bdump='brew bundle --global dump --force && sed -i "s/, link: false//"  ~/.Brewfile'
alias bcleanup='brew bundle --global cleanup' # --force
alias bic='brew install --cask'
alias bi='brew install'

# macOS
alias fixsound='sudo killall coreaudiod'

# kubectl
alias k8s-infer-deployment-name-from-pod-name="sed -E 's/-[a-z0-9]+-[a-z0-9]+$//' | sort -u"

# bub
alias n="build-cacher --source-dir $HOME/src/github.com/j-martin/nub -- go run main.go"
alias w="build-cacher --source-dir $HOME/src/github.com/j-martin/nub -- go run main.go workflow"

# clipboard
alias pc='pbcopy'
alias pp='pbpaste'

# golang
alias gomd='go mod download'
alias gomt='go mod tidy'
