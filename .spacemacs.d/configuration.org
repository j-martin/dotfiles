#+TITLE: Spacemacs Configuration
#+AUTHOR: Jean-Martin Archer
#+EMAIL: jm@jmartin.ca
#+STARTUP: content
* General
** Personal
#+begin_src emacs-lisp :results none
  (setq user-full-name "Jean-Martin Archer"
    user-mail-address "jm@jmartin.ca")
#+end_src
** Environment
#+begin_src emacs-lisp :results none
  (setq exec-path (append exec-path '("/usr/local/bin")))
  (setenv "RIPGREP_CONFIG_PATH" (substitute-in-file-name "$HOME/.config/ripgrep"))
#+end_src

** Convenience
   #+begin_src emacs-lisp :results none
     (setq confirm-kill-emacs 'y-or-n-p)
     (setq mac-emulate-three-button-mouse t)
     ;; (setq x-select-enable-clipboard nil)
     (fset 'evil-visual-updateyour-team.vault-x-selection 'ignore)
     (setq make-backup-files nil)
     (spacemacs/toggle-indent-guide-globally-on)
     ;; (spacemacs/toggle-camel-case-motion-globally-on)
     ;; (spacemacs/toggle-evil-cleverparens-on)
     ;; (spacemacs/toggle-smartparens-globally-on)
     (setq create-lockfiles nil)
     (setq save-interprogram-paste-before-kill t)
     (setq multi-term-program-switches "--login")
     (setq debug-on-error nil)
   #+end_src
** GitHub related
   #+begin_src emacs-lisp :results none
     (if (eq system-type 'darwin)
         (setq paradox-github-token (shell-command "keyring get system github_paradox"))
       (add-hook 'edit-server-done-hook
                 (lambda ()
                   (shell-command "open -a \"Google Chrome\""))))
   #+end_src
** Garbage Collection
From http://akrl.sdf.org/.
#+begin_src emacs-lisp :results none
  (setq garbage-collection-messages nil)
  (defmacro jm/k-time (&rest body)
    "Measure and return the time it takes evaluating BODY."
    `(let ((time (current-time)))
       ,@body
       (float-time (time-since time))))

  ;; Set garbage collection threshold to 512MB.
  (setq gc-cons-threshold #x20000000)

  ;; When idle for 15sec run the GC no matter what.
  (defvar jm/k-gc-timer
    (run-with-idle-timer 15 t (lambda () (garbage-collect))))

#+end_src

* UI/Visual
  #+begin_src emacs-lisp :results none
    (spacemacs/toggle-syntax-checking-on)
    (spacemacs/toggle-truncate-lines-on)
    (spacemacs/toggle-vi-tilde-fringe-off)
    (setq powerline-default-separator 'utf-8)
    (set-keyboard-coding-system nil)
    (setq neo-theme 'icons)
    (global-prettify-symbols-mode 1)
    (golden-ratio-mode 0)
    (menu-bar-mode 1)
    (setq-default avy-all-windows 'all-frames)
    (setq frame-title-format '("%b"))
  #+end_src
** Spaceline
   #+begin_src emacs-lisp :results none
     (defun jm/rolling-subseq (seq index len)
       (if (<= (length seq) 1)
           seq
         (if (<= (+ index len) (length seq))
             (subseq seq
                     index
                     (+ index len))
           (append (subseq seq
                           index
                           (length seq))
                   (subseq seq
                           0
                           (- (+ index len)
                              (length seq)))))))

     (defun jm/s-substring (str len)
       (if (< (length str) len)
           str
         (concat (substring str 0 (min (or (string-match " " str) 1024) len)) "…")))

     (defun jm/previous-buffer-line ()
       (let ((prev (mapcar (lambda (b) (jm/s-substring (buffer-name (car b)) 10))
                           (window-prev-buffers)))
             (next (mapcar (lambda (b) (jm/s-substring (buffer-name b) 10))
                           (window-next-buffers))))
         (mapconcat 'identity
                    (append (let ((prev-pos (position (buffer-name)
                                                      prev)))
                              (if (eq (car next) (car prev))
                                  (jm/rolling-subseq prev (+ (or prev-pos 0) 1) 3)
                                (jm/rolling-subseq prev 0 3)))
                            (if (not next)
                                nil
                              (append '("◀▶")
                                      (jm/rolling-subseq next 0 3))))
                    " ")))


     (spaceline-define-segment jm/previous-buffers
       "Displays the last three buffers"
       (jm/previous-buffer-line))
     (spaceline-toggle-jm/previous-buffers-on)

     (defun jm/test ()
       (interactive)
       (end-of-line)
       (open-line 1)
       (forward-line)
       (insert (jm/shell-command-to-string
                (concat "bub jira workday --org --prefix '***** ' "
                        (nth 0 (s-split " " (nth 4 (org-heading-components))))))))
   #+end_src

** Frame Size
   #+begin_src emacs-lisp :results none
     (if (eq system-type 'darwin)
         (add-to-list 'default-frame-alist
                      '(height . 60))
       (add-to-list 'default-frame-alist
                    '(width . 134)))
   #+end_src
** Whitespace
   #+begin_src emacs-lisp :results none
     (setq whitespace-display-mappings
           ;; all numbers are Unicode codepoint in decimal. ⁖ (insert-char 182 1)
           '((tab-mark 9 [183 9] [255 9]))) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」

     (global-whitespace-mode 1)
     (setq fill-column 120)
     (setq whitespace-line-column 260)

     (setq-default
      tab-width 2
      indent-tabs-mode nil
      fci-rule-column 120)
   #+end_src
** Natural Title bar
   #+begin_src emacs-lisp :results none
     (add-to-list 'default-frame-alist
                  '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist
                  '(ns-appearance . dark))
   #+end_src
** Scrolling
#+begin_src emacs-lisp :results none
(setq jit-lock-defer-time 0)
(setq fast-but-imprecise-scrolling t)
#+end_src
** Follow focus
#+begin_src emacs-lisp :results none
(setq mouse-autoselect-window t)
#+end_src

* Modes
  #+begin_src emacs-lisp :results none
    (require 'helm-bookmark)
    (setq-default tab-width 2 standard-indent 2)
  #+end_src

** Terminal
   #+begin_src emacs-lisp :results none
     (setq ansi-term-color-vector [term term-color-black term-color-red term-color-green
                                        term-color-yellow term-color-blue term-color-magenta
                                        term-color-cyan term-color-white])
   #+end_src

** Enabling
   #+begin_src emacs-lisp :results none
     (server-start)
     (delete-selection-mode 1)
     (editorconfig-mode 1)
     (spacemacs/toggle-smartparens-globally-on)
     (global-company-mode 0)
     (ws-butler-global-mode 1)
     (setq-default abbrev-mode t)
     (setq save-abbrevs 'silently)
     (super-save-mode +1)
     (setq super-save-auto-save-when-idle t)
     (setq-default super-save-auto-save-when-idle t)
   #+end_src
** Company
   #+begin_src emacs-lisp :results none
     (setq company-idle-delay 0.5)
   #+end_src
** Smart-Jump
   #+begin_src emacs-lisp :results none
     (require 'smart-jump)
     (smart-jump-setup-default-registers)
   #+end_src

** Autorevert
   #+begin_src emacs-lisp :results none
     ;; (global-auto-revert-mode t)
     (setq auto-revert-interval 0.25)
     ;; (setq auto-revert-verbose nil)
     (setq revert-without-query '(".*"))
   #+end_src
** Markdown
   #+begin_src emacs-lisp :results none
     (defun jm/markdown-mode-config ()
       (setq tab-width 4)
       (setq indent-tabs-mode nil)
       (setq markdown-asymmetric-header t))

     (add-hook 'markdown-mode-hook 'jm/markdown-mode-config)
   #+end_src

** Aggresive Indent
   #+begin_src emacs-lisp :results none
     ;; (add-hook 'emacs-lisp-mode-hook 'aggressive-indent-mode)
   #+end_src
** Atomic Chrome
   #+begin_src emacs-lisp :results none
     (atomic-chrome-start-server)
   #+end_src
** Parinfer
   #+begin_src emacs-lisp :results none
     ;; (require 'parinfer)
     ;; (add-hook 'emacs-lisp-mode-hook 'parinfer-mode)
     ;; (add-hook 'emacs-lisp-mode-hook 'turn-off-smartparens-mode)
   #+end_src
** Python
   #+begin_src emacs-lisp :results none
     (setq anaconda-mode-server-command "
     import sys
     import anaconda_mode
     anaconda_mode.main(sys.argv[1:])
     ")
     (defun jm/python-mode-config ()
       (setq evil-shift-width 4))
     (add-hook 'python-mode-hook 'jm/python-mode-config)
   #+end_src

** Alert
   #+begin_src emacs-lisp :results none
     (setq alert-default-style 'osx-notifier)
   #+end_src
** Elisp
   #+begin_src emacs-lisp :results none
     (setq-default srefactor-newline-threshold 120)
   #+end_src

** EShell
   #+begin_src emacs-lisp :results none
     ;; disabling company-mode
     (add-hook 'eshell-mode-hook 'company-mode)
   #+end_src

** Shell
   #+begin_src emacs-lisp :results none
     (setq-default dotspacemacs-configuration-layers
                   '((shell :variables shell-default-shell 'eshell)))
   #+end_srC

** AutoMode
   #+begin_src emacs-lisp :results none
     (add-to-list 'auto-mode-alist '("\\.ino\\'" . c-mode))
     (add-to-list 'auto-mode-alist '("\\.raml\\'" . yaml-mode))
     (add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
     (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))
     (add-to-list 'auto-mode-alist '("\\.template\\'" . json-mode))
     ;; (add-to-list 'auto-mode-alist '("\\Jenkinsfile\\'" . groovy-mode))
   #+end_src

** Docker
   #+begin_src emacs-lisp :results none
     (setenv "DOCKER_TLS_VERIFY" "0")
     (setenv "DOCKER_HOST" "tcp://10.11.12.13:2375")
   #+end_src

** Groovy
   #+begin_src emacs-lisp :results none
     (add-hook 'groovy-mode-hook
               (lambda ()
                 (setq groovy-indent-offset 2)))
   #+end_src

** Projectile
   #+begin_src emacs-lisp :results none
     (setq projectile-enable-caching nil)
     (setq projectile-globally-ignored-directories '(".idea" ".ensime_cache" ".eunit" ".git" ".hg" ".fslckout" "_FOSSIL_" ".bzr" "_darcs" ".tox" ".svn" ".stack-work" "node_modules", "mod"))
   #+end_src
** Tramp
   #+begin_src emacs-lisp :results none
     (setq tramp-default-method "ssh")
   #+end_src
** Pretty symbols
   #+begin_src emacs-lisp :results none
     (defun jm/pretty-symbols ()
       "make some word or string show as pretty Unicode symbols"
       (setq prettify-symbols-alist
             '(
               ("lambda" . 955) ; λ
               ("->" . 8594)    ; →
               ("=>" . 8658)    ; ⇒
               ("function" . ?ƒ); ƒ
               )))
     (add-hook 'lisp-mode-hook 'jm/pretty-symbols)
     (add-hook 'org-mode-hook 'jm/pretty-symbols)
     (add-hook 'js2-mode-hook 'jm/pretty-symbols)
     (add-hook 'scala-mode-hook 'jm/pretty-symbols)
     (add-hook 'coffee-mode-hook 'jm/pretty-symbols)
     (add-hook 'lua-mode-hook 'jm/pretty-symbols)
   #+end_src

** Makefile
   #+begin_src emacs-lisp :results none
     (defun jm/makefile-mode-config ()
       (setq-default indent-tabs-mode t)
       (global-set-key (kbd "TAB") 'self-insert-command)
       (setq indent-tabs-mode t)
       (setq tab-width 8)
       (setq c-basic-indent 8))

     (add-hook 'makefile-mode-hook 'jm/makefile-mode-config)
     (add-hook 'makefile-bsdmake-mode-hook 'jm/makefile-mode-config)
   #+end_src

** Shell-script
   #+begin_src emacs-lisp :results none
     (defun jm/sh-mode-config ()
       (interactive)
       (spacemacs/toggle-ggtags-mode-off)
       (setq sh-indentation 2)
       (setq sh-basic-offset 2))

     (add-hook 'sh-mode-hook 'jm/sh-mode-config)
     (remove-hook 'sh-mode-hook 'ggtags-mode)

     (unless (eq system-type 'windows-nt)
       (push 'company-dabbrev-code company-backends-sh-mode))
   #+end_src

** Go
   #+begin_src emacs-lisp :results none
     (defun jm/go-mode-config ()
       (setq tab-width 2)
       (setq go-tab-width 2)
       (add-hook 'before-save-hook 'gofmt-before-save)
       (setq indent-tabs-mode 1))

     (add-hook 'go-mode-hook 'jm/go-mode-config)
   #+end_src

** EVIL
   #+begin_src emacs-lisp :results none
     (setq-default evil-escape-delay 0.2)
     (setq-default evil-escape-key-sequence "jk")
     (setq-default evil-escape-unordered-key-sequence t)
     (evil-ex-define-cmd "E" 'revert-buffer)
     (evil-ex-define-cmd "WQ" 'evil-save-modified-and-close)
     (evil-ex-define-cmd "Wq" 'evil-save-modified-and-close)
     (require 'evil-string-inflection)
     (require 'evil-textobj-syntax)
   #+end_src

*** Center on fold commands
#+begin_src emacs-lisp :results none
(defun jm/recenter (&rest anything) (interactive) (recenter))
(advice-add 'evil-fold-action :after 'jm/recenter)
#+end_src

** Java
   #+begin_src emacs-lisp :results none
     (add-hook 'java-mode-hook
               (lambda ()
                 (setq c-basic-offset 2 tab-width 2)))
   #+end_src
** JS
   #+begin_src emacs-lisp :results none
     (setq-default js-indent-level 2)
   #+end_src
** Magit
   #+begin_src emacs-lisp :results none
     (setq magit-repository-directories '("~/code/"))
     (setq-default vc-follow-symlinks t)
     (setq magit-save-repository-buffers 'dontask)
     (setq magit-push-current-set-remote-if-missing t)

     (defun jm/fill-then-insert-space ()
       (interactive)
       (fill-paragraph)
       (insert " "))

     (defun jm/git-commit-mode-config ()
       (setq-local fill-column 64)
       (turn-on-auto-fill)
       ;; (local-set-key (kbd "SPC") #'jm/fill-then-insert-space)
       (if (jm/current-line-empty-p)
           (jm/magit-commit-message)))
     (defun jm/git-status-mode-config()
       (setq-local evil-escape-key-sequence nil))
     (add-hook 'git-commit-mode-hook 'jm/git-commit-mode-config)
     (add-hook 'magit-status-mode-hook 'jm/git-status-mode-config)
   #+end_src
*** Prevent magit from exiting with esc
#+begin_src emacs-lisp :results none
  ;; (evil-define-key* evil-magit-state magit-mode-map [escape] nil)
#+end_src
*** Workaround rebase keybinding being messed up
https://github.com/syl20bnr/spacemacs/issues/15089
#+begin_src emacs-lisp :results none
 (setq auto-mode-alist (delete '("/git-rebase-todo$" . helm-ls-git-rebase-todo-mode) auto-mode-alist))
#+end_src

*** Explicit bin path
According to
https://www.reddit.com/r/emacs/comments/fhr72q/solution_performance_problem_with_magit_on_macos/
it makes magit a fair bit faster.
#+begin_src emacs-lisp :results none
(setq magit-git-executable "/usr/local/bin/git")
#+end_src
** Org
*** Basic setup
    #+begin_src emacs-lisp :results none
      (require 'ox-clip)
      (setq org-directory "~/.org/")
      (setq org-default-notes-file "~/.org/main.org")
      (setq org-hide-emphasis-markers t)
      (setq org-ellipsis " ⤸")
      (setq org-src-tab-acts-natively t)
      (setq org-agenda-files (list "~/.org/main.org"
                                   "~/.org/work.org"
                                   "~/.org/todoist.org"
                                   "~/.org/calendar-personal.org"
                                   "~/.org/calendar-work.org"))
      (setq org-refile-targets
            '(("main.org" :maxlevel . 1)
              ("work.org" :maxlevel . 1)
              ("references.org" :maxlevel . 1)
              (nil :maxlevel . 3)))

      (setq org-startup-folded nil)
      (setq org-catch-invisible-edits 'error)
      (add-hook 'org-mode-hook 'jm/org-hooks)

      (defun jm/org-hooks ()
        (smartparens-mode)
        (setq evil-auto-indent nil))

      (setq org-todo-keywords
            (quote ((sequence "TODO(o)" "|" "DONE(t)")
                    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

      (setq org-todo-state-tags-triggers
            (quote (("CANCELLED" ("cancelled" . t))
                    ("WAITING" ("waiting" . t))
                    ("HOLD" ("waiting") ("HOLD" . t))
                    (done ("waiting") ("hold"))
                    ("TODO" ("waiting") ("cancelled") ("hold"))
                    ("NEXT" ("waiting") ("cancelled") ("hold"))
                    ("DONE" ("waiting") ("cancelled") ("hold")))))
      (setq org-use-fast-todo-selection t)

      (setq org-startup-with-inline-images t)
      (setq org-export-with-section-numbers nil)
    #+end_src
***** Always save archived subtrees
#+begin_src emacs-lisp :results none
(advice-add 'org-archive-subtree :after #'org-save-all-org-buffers)
#+end_src
***** Keep images not too wide                                       :ATTACH:
#+begin_src emacs-lisp :results none
(setq org-image-actual-width 800)
(setq org-download-screenshot-method "screencapture %s")
#+end_src

*** Org sync
#+begin_src emacs-lisp :results none
  (defun jm/org-sync ()
    (interactive)
    (message "Running org-sync")
    (shell-command "~/.bin/org-sync > /dev/null 2>&1 & disown"))

  (run-with-timer 0 (* 10 60) 'jm/org-sync)
  (run-with-idle-timer (* 10 60) t 'jm/org-sync)
#+end_src

*** Org Roam
#+begin_src emacs-lisp :results none
(setq org-roam-directory "~/.org/roam")
(add-hook 'after-init-hook 'org-roam-mode)
#+end_src

*** Extra packages
    #+begin_src emacs-lisp :results none
      (require 'org-protocol)
    #+end_src

*** Babel
    #+begin_src emacs-lisp :results none
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-src-window-setup 'current-window)
      ;; Use: find /usr/local/Cellar/plantuml -name 'plantuml.jar'
      (setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2018.12/libexec/plantuml.jar")
      (setq org-confirm-babel-evaluate nil)
    #+end_src

*** Capture Templates
    #+begin_src emacs-lisp :results none
      (add-hook 'org-capture-mode-hook 'evil-insert-state)

      (defun jm/execute-in-previous-buffer (fn)
      "This is required for org-capture-template function because some commands,
      e.g. git would be run from the org file which is in a different repo."
        (let ((initial-buffer (current-buffer)))
          (set-buffer (car (buffer-list)))
          (let ((output (funcall fn)))
            (set-buffer initial-buffer) output)))

      (defun jm/org-set-property (property value)
        (if value (org-set-property property value)))

      (defun jm/org-branch-header ()
      "Custom function to be used with org-template file+function.
      Creates a note under the branch name heading in an heading called 'Branch Notes'.
      The 'Branch Note' heading must be created in advance."

        (let ((branch-name (jm/execute-in-previous-buffer 'jm/git-current-branch))
              (repository-name (jm/execute-in-previous-buffer 'jm/git-repository)))
          (let ((marker (org-find-property "BRANCH" branch-name)))
            (if marker
                (progn
                  (print "Branch found. Appending.")
                  (goto-char marker))
              (progn
                (print "No branch found. Creating new one.")
                (goto-char (org-find-exact-headline-in-buffer "Active Projects"))
                (forward-line 1)
                (org-insert-heading "")
                (insert branch-name)
                (jm/org-set-property "REPOSITORY" repository-name)
                (jm/org-set-property "BRANCH" branch-name)
                (jm/org-set-property "REPOSITORY_URL" (jm/github-repository-url repository-name))
                (jm/org-set-property "REPOSITORY_COMPARE_URL" (jm/github-compare-url repository-name branch-name))
                (jm/org-set-property "CLUBHOUSE_ID" (jm/clubhouse-story-id-from-branch-name branch-name))
                (jm/org-set-property "CLUBHOUSE_URL" (jm/clubhouse-story-url (jm/clubhouse-story-id-from-branch-name branch-name)))
                )))))

      (setq
       org-capture-templates
       '(
         ("t" "Inbox (Main)"
          entry
          (file+headline "~/.org/main.org" "Inbox")
          "* TODO %?%i\n:PROPERTIES:\n:ENTERED: %U\n:END:\n%:annotation\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n")
         ("T" "Inbox without selection (Main)"
          entry
          (file+headline "~/.org/main.org" "Inbox")
          "* TODO %?\n:PROPERTIES:\n:ENTERED: %U\n:END:\n")
         ("w" "Inbox (Work)"
          entry
          (file+headline "~/.org/work.org" "Inbox")
          "* TODO %?%i\n:PROPERTIES:\n:ENTERED: %U\n:END:\n\n%:annotation\n\n:DESCRIPTION:\n%i\n:END:\n")
         ("W" "Inbox without selection (Work)"
          entry
          (file+headline "~/.org/work.org" "Inbox")
          "* TODO %?%i\n:PROPERTIES:\n:ENTERED: %U\n:END:\n\n:DESCRIPTION:\n:END:\n")
         ("b" "Branch (Work)"
          entry
          (file+function "~/.org/work.org" jm/org-branch-header)
          "* TODO %?%i\n:PROPERTIES:\n:ENTERED: %U\n:END:\n\n%:annotation\n\n:DESCRIPTION:\n%i\n:END:\n")
         ("r" "References / Research"
          entry
          (file+headline "~/.org/references.org" "Research")
          "* %?%i\n:PROPERTIES:\n:ENTERED: %U\n:END:\n%:annotation\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n")
         ("z" "Tenancy Journal"
          entry
          (file+datetree+prompt "~/.org/tenancy-journal.org")
          "* %?%i\n:PROPERTIES:\n:ENTERED: %U\n:END:\n%i\n%a")
         ))
    #+end_src
*** org-present
    #+begin_src emacs-lisp :results none
      (eval-after-load "org-present"
        '(progn
           (add-hook 'org-present-mode-hook
                     (lambda ()
                       (org-present-big)
                       (toggle-frame-fullscreen)
                       (org-display-inline-images)
                       (org-present-hide-cursor)
                       (org-present-read-only)))
           (add-hook 'org-present-mode-quit-hook
                     (lambda ()
                       (org-present-small)
                       (org-remove-inline-images)
                       (org-present-show-cursor)
                       (toggle-frame-fullscreen)
                       (org-present-read-write)))))
    #+end_src

*** Export tree to markdown
#+begin_src emacs-lisp :results none
  (defun jm/org-md-export ()
    (interactive)
    (setq org-export-show-temporary-export-buffer nil)
    (org-mark-subtree)
    (org-md-export-as-markdown)

    (spacemacs/copy-whole-buffer-to-clipboard)
    (spacemacs/kill-this-buffer))
#+end_src

** Git Link
*** Generate link with the commit sha instead of the branch
 #+begin_src emacs-lisp :results none
 (setq git-link-use-commit t)
 #+end_src

* Keyboard Bindings
*** Normal
  #+begin_src emacs-lisp :results none
    (define-key evil-insert-state-map (kbd "M-<up>") 'er/expand-region)
    (define-key evil-insert-state-map (kbd "M-<down>") 'er/contract-region)
    (define-key evil-normal-state-map (kbd "M-<up>") 'er/expand-region)
    (define-key evil-normal-state-map (kbd "M-<down>") 'er/contract-region)
    (define-key evil-normal-state-map (kbd "[s") 'flycheck-previous-error)
    (define-key evil-normal-state-map (kbd "]s") 'flycheck-next-error)
    (define-key evil-normal-state-map (kbd "]P") 'jm/append-clipboard)

    (define-key evil-normal-state-map (kbd "K") (lambda() (interactive) (progn (execute-kbd-macro "ciw"))))
    (define-key evil-normal-state-map (kbd "H-/") 'evil-commentary)

    (global-set-key (kbd "M-SPC") 'hippie-expand)
    (global-set-key (kbd "<f2>") 'flycheck-next-error)
    (global-set-key (kbd "H-<f12>") 'spacemacs/helm-jump-in-buffer)
    (global-set-key (kbd "H-<left>") 'back-to-indentation)
    (global-set-key (kbd "H-<right>") 'end-of-line)
    (global-set-key (kbd "H-b") 'smart-jump-go)
    (global-set-key (kbd "H-j") 'previous-buffer)
    (global-set-key (kbd "H-k") 'next-buffer)
    (global-set-key (kbd "H-t") 'neotree-find)
    (global-set-key (kbd "H-e") 'helm-projectile-switch-to-buffer)
    (global-set-key (kbd "H-E") 'helm-mini)
    (global-set-key (kbd "H-o") 'helm-projectile-find-file)
    (global-set-key (kbd "H-g") 'magit-status)
    (global-set-key (kbd "H-[") 'evil-jump-backward)
    (global-set-key (kbd "H-]") 'evil-jump-forward)
    (global-set-key (kbd "C-H-g") 'evil-iedit-state/iedit-mode)
    (global-set-key (kbd "H-D") 'dash-at-point)
    (global-set-key (kbd "C-i") 'evil-jump-forward)
    (global-set-key (kbd "C-'") (lambda() (interactive) (insert "'")))
    (global-set-key (kbd "C-\"") (lambda() (interactive) (insert "\"")))
    (global-set-key (kbd "C-M-H-I") 'jm/open-with-idea)
    ;; (global-set-key (kbd "C-SPC") 'helm-company)
    (global-set-key (kbd "C-M-SPC") 'helm-yas-complete)

    (define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
    (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

    (spacemacs/set-leader-keys "by" 'spacemacs/copy-whole-buffer-to-clipboard)
    (spacemacs/set-leader-keys "fi" 'jm/open-iterm)
    (spacemacs/set-leader-keys "gc" 'magit-commit)
    (spacemacs/set-leader-keys "gp" 'jm/github-open-pr)
    (spacemacs/set-leader-keys "ih" 'jm/insert-left)
    (spacemacs/set-leader-keys "il" 'jm/insert-right)
    (spacemacs/set-leader-keys "jj" 'helm-jump-in-buffer)
    (spacemacs/set-leader-keys "o0" 'langtool-check-done)
    (spacemacs/set-leader-keys "o8" 'langtool-check)
    (spacemacs/set-leader-keys "o9" 'langtool-correct-buffer)
    (spacemacs/set-leader-keys "oC" 'jm/open-config-private)
    (spacemacs/set-leader-keys "oI" 'jm/org-github-in)
    (spacemacs/set-leader-keys "oO" 'jm/org-github-out)
    (spacemacs/set-leader-keys "oS" 'jm/langtool)
    (spacemacs/set-leader-keys "oc" 'jm/open-config)
    (spacemacs/set-leader-keys "od" 'jm/helm-org-dir)
    (spacemacs/set-leader-keys "of" 'jm/helm-forks-dir)
    (spacemacs/set-leader-keys "oh" 'jm/helm-home-dir)
    (spacemacs/set-leader-keys "oi" 'jm/open-project-iterm)
    (spacemacs/set-leader-keys "ol" 'org-content)
    (spacemacs/set-leader-keys "om" 'jm/open-main)
    (spacemacs/set-leader-keys "on" 'jm/open-with-nvim)
    (spacemacs/set-leader-keys "oo" 'jm/open-with-idea)
    (spacemacs/set-leader-keys "op" 'jm/open-with-sublime)
    (spacemacs/set-leader-keys "or" 'jm/open-references)
    (spacemacs/set-leader-keys "oU" 'jm/unfill-buffer)
    (spacemacs/set-leader-keys "ot" 'jm/open-inbox)
    (spacemacs/set-leader-keys "ow" 'jm/open-work)
    (spacemacs/set-leader-keys "ox" 'jm/org-md-export)
    (spacemacs/set-leader-keys "pi" 'jm/open-project-iterm)
    (spacemacs/set-leader-keys "tP" 'parinfer-toggle-mode)
    (spacemacs/set-leader-keys "wa" 'jm/split-window-below-and-find-file)
    (spacemacs/set-leader-keys "ws" 'jm/split-window-below)
    (spacemacs/set-leader-keys "wv" 'jm/split-window)
#+end_src
*** Org-mode
#+begin_src emacs-lisp :results none
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "r" 'org-refile)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "oo" 'org-edit-src-code)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "mm" 'org-roam)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "mf" 'org-roam-find-file)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "mg" 'org-roam-graph)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "mi" 'org-roam-insert)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "oc" 'org-clubhouse-create-story)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "ou" 'org-clubhouse-update-description)
#+end_src

*** Map escape to abort seq
#+begin_src emacs-lisp :results none
  (which-key-define-key-recursively global-map [escape] 'keyboard-quit)
#+end_src
*** Remap C-c C-c and C-c C-k
#+begin_src emacs-lisp :results none
  (define-key org-mode-map (kbd "C-c C-k") nil)
  (define-key org-mode-map (kbd "C-c C-k") nil)
  (global-set-key (kbd "H-<return>") (kbd "C-c C-c"))
  (global-set-key (kbd "H-<escape>") (kbd "C-c C-k"))
#+end_src

** Fixes
* Functions
** Git
#+begin_src emacs-lisp :results none
  (defun jm/magit-commit-message ()
    (let ((story-id (jm/clubhouse-story-id-from-branch-name)))
      (when (> (length story-id) 1)
        (insert (jm/clubhouse-story-link story-id))))
    (beginning-of-buffer)
    (evil-insert-state))

  (defun jm/magit-branch (task)
    (magit-branch-and-checkout (jm/git-branch-name-sanitize task)
                               "origin/master"))

  (defun jm/git-branch-name-sanitize (name)
    (replace-regexp-in-string
     "-$" ""
     (replace-regexp-in-string
      "-+" "-"
      (replace-regexp-in-string
       "[^a-zA-Z0-9]" "-" name))))

  (defun jm/github-open-pr ()
    (interactive)
    (let ((branch (jm/git-current-branch))
          (repo (jm/github-repository-url)))
      (start-process "bub pr" nil "bub" "workflow" "pr")))

  (defun jm/git-current-branch ()
    (s-trim (shell-command-to-string "git symbolic-ref --short -q HEAD")))

  (defun jm/git-current-origin ()
    (s-trim (shell-command-to-string "git config --get remote.origin.url")))

  (defun jm/git-repository ()
    (s-chop-suffix
     ".git"
     (replace-regexp-in-string
      "^.*github\.com." "" (jm/git-current-origin))))

  (defun jm/github-repository-url (&optional name)
    (concat "https://github.com/" (if name name (jm/git-repository))))

  (defun jm/github-compare-url (&optional repository-name branch-name)
    (concat (jm/github-repository-url repository-name) "/compare/master..." (if branch-name branch-name (jm/git-current-branch))))

#+end_src
** Shortcut
#+begin_src emacs-lisp :results none
  (defun jm/clubhouse-story-id-from-branch-name (&optional branch-name)
    (car (cdr (s-match "/sc-\\([0-9]+\\)/" (if branch-name branch-name (jm/git-current-branch))))))

  (defun jm/clubhouse-story-link (story-id)
    (if story-id
        (let ((workspace (if org-clubhouse-team-name (concat org-clubhouse-team-name "/") "")))
          (concat "\n[sc-" story-id "](" (jm/clubhouse-story-url story-id) ")"))))

  (defun jm/clubhouse-story-url (story-id)
    (if story-id
        (let ((workspace (if org-clubhouse-team-name (concat org-clubhouse-team-name "/") "")))
          (concat "https://app.shortcut.com/" workspace "story/" story-id ))))


#+end_src

** Editing
#+begin_src emacs-lisp :results none
  (defun jm/append-clipboard ()
    (interactive)
    (progn
      (end-of-line)
      (insert " ")
      (yank)))
#+end_src

** Utils
#+begin_src emacs-lisp :results none
  (defun jm/unfill-buffer ()
    (interactive)
    (unfill-region (point-min) (point-max)))

  (defun jm/calc ()
    (interactive)
    (quick-calc)
    (yank))

  (defun jm/insert-today ()
    (interactive)
    (insert (shell-command-to-string "/bin/date \"+%Y-%m-%d\"")))

  (defun jm/insert-left ()
    (interactive)
    (insert " "))

  (defun jm/insert-right ()
    (interactive)
    (evil-forward-char 1)
    (insert " ")
    (evil-backward-char 2))

  (defun jm/shell-command-to-string (command)
    (with-output-to-string
      (with-current-buffer
          standard-output
        (process-file shell-file-name nil '(t nil)  nil shell-command-switch command))))

  (defun jm/current-line-empty-p ()
    (save-excursion
      (beginning-of-line)
      (looking-at "[[:space:]]*$")))

  (defun jm/camel-to-snake-case ()
    (interactive)
    (progn (replace-regexp "\\([A-Z]\\)" "_\\1" nil (region-beginning) (region-end)
                                         (downcase-region (region-beginning) (region-end)))))
#+end_src
** Window Management
#+begin_src emacs-lisp :results none
  (defun jm/split-window ()
    (interactive)
    (split-window-right-and-focus)
    (spacemacs/alternate-buffer))

  (defun jm/split-window-below ()
    (interactive)
    (split-window-below-and-focus)
    (spacemacs/alternate-buffer))

  (defun jm/split-window-below-and-find-file ()
    (interactive)
    (split-window-below-and-focus)
    (helm-projectile-find-file))
#+end_src

** File Navigation
#+begin_src emacs-lisp :results none
  (defun jm/open-file (file)
    (find-file (expand-file-name file))
    (evil-normal-state))

  (defun jm/open (file)
    (shell-command (concat "open " file)))

  (defun jm/open-config ()
    (interactive)
    (jm/open-file "~/.spacemacs.d/configuration.org"))

  (defun jm/open-config-private ()
    (interactive)
    (jm/open-file "~/.private/configuration.org"))

  (defun jm/open-main ()
    (interactive)
    (jm/open-file "~/.org/main.org"))

  (defun jm/open-inbox ()
    (interactive)
    (jm/open-file "~/.org/main.org"))

  (defun jm/open-references ()
    (interactive)
    (jm/open-file "~/.org/references.org"))

  (defun jm/open-work ()
    (interactive)
    (jm/open-file "~/.org/work.org"))

  (defun jm/helm-org-dir ()
    (interactive)
    (helm-find-files-1 (expand-file-name "~/.org/")))

  (defun jm/helm-home-dir ()
    (interactive)
    (helm-find-files-1 (expand-file-name "~/")))

  (defun jm/helm-work-dir ()
    (interactive)
    (helm-find-files-1 (expand-file-name "~/code/alloy/")))
#+end_src

** External Applications
#+begin_src emacs-lisp :results none
  (defun jm/get-column ()
    (number-to-string (+ (current-column) 1)))

  (defun jm/get-line-number ()
    (number-to-string (line-number-at-pos)))

  (defun jm/open-with-line (app)
    (when buffer-file-name
      (save-buffer)
      (shell-command (concat app " \"" buffer-file-name ":" (jm/get-line-number) "\""))))

  (defun jm/open-with-line-column (app)
    (when buffer-file-name
      (save-buffer)
      (shell-command (concat app " \"" buffer-file-name ":" (jm/get-line-number) ":" (jm/get-column) "\""))))

  (defun jm/open-with-line-column-vim (app)
    (when buffer-file-name
      (shell-command (concat app " \"" buffer-file-name "\" \"+normal " (jm/get-line-number) "G" (jm/get-column) "|\""))))

  (defun jm/open-with-reveal (app)
    (shell-command (concat "osascript -e 'tell application \"" app "\" to activate'")))

  (defun jm/open-with-sublime ()
    (interactive)
    (jm/open-with-line-column "subl"))

  (defun jm/open-iterm ()
    (interactive)
    (shell-command (concat "~/.bin/open-in-iterm '" default-directory "'")))

  (defun jm/open-project-iterm ()
    (interactive)
    (shell-command (concat "~/.bin/open-in-iterm \"$(git rev-parse --show-toplevel)\"")))

  (defun jm/open-with-idea ()
    (interactive)
    (jm/open-with-reveal "IntelliJ IDEA")
    (jm/open-with-line "/usr/local/bin/idea"))

  (defun jm/open-with-vscode ()
    (interactive)
    (jm/open-with-line-column "/usr/local/bin/code --goto"))

  (defun jm/open-with-nvim ()
    (interactive)
    (jm/open-with-line-column-vim "/usr/local/Cellar/neovim-dot-app/HEAD/bin/gnvim"))
#+end_src
