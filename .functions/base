#!/usr/bin/env bash

_info() {
  echo >&2 "[info] $*"
}

_warn() {
  echo >&2 "[warn] $*"
}

_error() {
  echo >&2 "[error] $*"
}

_production() {
  # iTerm escape code to turn the terminal red.
  printf "\033]Ph341817\033\\" >&2
  trap _safe EXIT
  "$@"
}

_watchout() {
  printf "\033]Ph2d1800\033\\" >&2
  trap _safe EXIT
  "$@"
}

_safe() {
  printf "\033]1337;SetProfile=Default\a"
}

_gnu() {
  if [[ "$(uname)" == 'Darwin' ]]; then
    "g${1}" "${@:2}"
  else
    "$@"
  fi
}

_pick_first_col() {
  cut -d ' ' -f1
}

_copy() {
  tr -d '\n' \
    | pbcopy
  _info 'The output in your clipboard'
}

cached() {
  _cached "$@"
}

_cached() {
  local ttl="${CACHE_TTL:-300}"

  local ts
  ts="$(($(date +'%s') / ttl))"

  local filename
  filename="${TMPDIR}${ts}-$(echo "$*" | shasum | cut -d' ' -f1)"

  if [[ "$CACHE_DISABLED" == '1' ]] || [[ ! -s "$filename" ]]; then
    "$@" | tee "$filename"
    _info "Cached '$*' to '$filename'."
  else
    cat "$filename"
    _warn "Used cached file '$filename'"
  fi
}

_case_sentence() {
  sed -e 's/^\b\(.\)/\u\1/g' <<< "$*"
}

_with_fzf() {
  local app="$1"
  local prefix="${*:2}"
  prefix="$(awk '{$1=$1};1' <<< "${prefix}" | sed 's#^a/##; s#^b/##')"
  if [[ -f "$prefix" ]]; then
    eval "$app $prefix"
    return
  fi
  local file
  file="$(_fzf_with_preview "${prefix}" || echo "${prefix}")"
  if [[ -f "$file" ]]; then
    eval "$app $file"
  else
    echo "[error] '$file' is not a file."
  fi
}

__fzf() {
  fzf --select-1 --exit-0 "$@"
}

_fzf() {
  __fzf --query "$@"
}

_fzf_pick() {
  __fzf --header-lines=1 --query "$@" \
    | awk '{print $1}'
}

_fzf_with_preview() {
  # shellcheck disable=SC2016
  __fzf --height 70% \
    --preview 'bat --color always {}' \
    --preview-window="down:75%" \
    --query "$@"
}

_prefix() {
  basename "$(pwd)" | sed 's/\-.*//g'
}

_open_tunnel() {
  local host="${1}"
  local port="${2}"
  local local_port="${3:-$port}"
  local jump_host="${4:-jump}"
  _production
  ssh -M -S ctrl-socket -fnNT -L "${local_port}:${host}:${port}" "${jump_host}"
  ssh -S ctrl-socket -O check 'jump'
  _info "Tunnel to '${host}:${port}' open on '127.0.0.1:${local_port}'"
}

_close_tunnel() {
  ssh -S ctrl-socket -O exit 'jump' || _warn 'The tunnel was already closed.'
  _info 'Tunnel closed.'
  _safe
}

_touch() {
  local filepath="$1"
  mkdir -p "$(dirname "$filepath")"
  \touch "$filepath" "${@:2}"
}

_pipenv_run() {
  local path_file='.python_path'
  if [[ ! -f Pipfile ]]; then
    _info 'There is no Pipfile in the directory.'
    return 1
  fi

  if [[ ! -f "${path_file}" ]]; then
    pipenv --venv > "${path_file}"
  fi
  "$(cat "${path_file}")/bin/$1" "${@:2}"
}

_temp() {
  local location
  location="$(mktemp)"
  cat > "${location}"
  _info "Saved to: ${location}"
}

_pbcopy() {
  local content
  content="$(cat)"

  _info "Clipboard set to:\\n${content}"
  printf '%s' "${content}" | perl -pe 'chomp if eof' | pbcopy
}

_unfill() {
  # Unfill/unwrap (reflow) text to be full length.
  sed 's/^-/\n-/g' | perl -00 -lpe 's/^-/\n-/g, s/\n/ /g, s/ +/ /g'
}

_to_lowercase() {
  tr '[:upper:]' '[:lower:]'
}

_to_uppercase() {
  tr '[:lower:]' '[:upper:]'
}

_to_snake_case() {
  perl -pe 's/([a-z0-9])([A-Z])/$1_\L$2/g' \
    | _to_lowercase
}
