#!/usr/bin/env bash

_git_repo() {
  local origin
  origin="$(git config --get remote.origin.url)"

  if [[ "${origin}" == "${GITHUB_URL}"* ]]; then
    sed "s#${GITHUB_URL}/##g; s/\.git//" <<< "${origin}"
  else
    cut -d ':' -f2 <<< "${origin}" \
      | cut -d '.' -f1 \
      | head -n1
  fi
}

_git_org_name() {
  git config --get remote.origin.url \
    | cut -d/ -f2 \
    | cut -d. -f1
}

_git_repo_name() {
  git config --get remote.origin.url \
    | cut -d/ -f2 \
    | cut -d. -f1
}

_git_current_branch() {
  git symbolic-ref --short -q HEAD
}

_git_current_branch_url() {
  _git_current_branch \
    | sed "s/#/%23/g"
}

_git_filter_issue_key() {
  sed 's/patch-//' \
    | grep -oE '^[A-Z]+-[0-9]+'
}

_git_current_issue_number() {
  _git_current_branch \
    | (_git_filter_issue_key || echo '')
}

_git_pick_branch_no_origin() {
  local filter="$1"
  _git_pick_branch "$filter" \
    | sed 's/origin\///g'
}

_git_pick_unstaged_files() {
  {
    echo '.'
    git diff --name-only
    git ls-files --others --exclude-standard
  } \
    | fzf -1 --multi --literal --query "${1:-}" "${@:2}"
}

_git_command_with_fzf() {
  local command="$1"
  local query="$2"
  if [[ -e "${query}" ]] || [[ -z "${query}" ]] || [[ "${query}" == -* ]]; then
    git "${command}" "${@:2}"
  else
    (
      IFS=$'\n\t'
      git "${command}" $(_git_pick_unstaged_files "${query}") "${@:3}"
    )
  fi
}

_git_extract_commit() {
  local path="$1"
  local ref="${2:-HEAD}"
  git checkout "${ref}" -- "${path}"
  git commit -m 'merge with previous commit' .
  git revert HEAD
}

_git_pick_any_branches() {
  git branch --all \
    | sed 's#remotes/origin/##; s#^. ##' \
    | fzf "$@"
}

_git_pick_branch() {
  local filter="$1"
  git for-each-ref \
    --sort=-committerdate refs/heads/ \
    --format='%(HEAD) %(refname:short) - %(objectname:short) - %(contents:subject) - %(authorname) (%(committerdate:relative))' \
    | grep -v '^\*' \
    | fzf --no-sort -q "${filter}" \
    | awk '{print $1}'
}

_git_pick_commit() {
  git log --oneline --all \
    | head -n 100 \
    | _fzf "$1" \
    | _pick_first_col
}

_git_commit_with_issue_key() {
  local message="$1"
  git commit -n -m "$(_git_format_commit_message ${message})" "${@:2}"
}

_git_format_commit_message() {
  fold -w 64 -s <<< "${@}" \
    | sed 's,^ *,,; s, *$,,'
}

_slugify() {
  tr \'' "#:,.+^&*()`[]@$%' '-' \
    | tr '[:upper:]' '[:lower:]' \
    | sed -E 's/-+/-/g; s/^-//; s/-$//'
}

_git_new_branch_from_commit() {
  # Removing the ] that appears next to the commit hash depending on the operation.
  local object="${1//]/}"
  local title
  title="$(git log --format=%s -n 1 "${object}")"
  _git_new_branch "${title}"
  git cherry-pick "${object}"
}

__git_get_main_branch_name() {
  if git config --get branch.main.remote > /dev/null 2>&1; then
    echo 'main'
  else
    echo 'master'
  fi
}

_git_new_branch() {
  local name="$1"
  git fetch 'origin'
  __git_new_branch "$name" "origin/$(__git_get_main_branch_name)"
}
__git_new_branch() {
  local name="$1"
  local base_ref="${2:-}"
  git checkout -b "$(git config --get clubhouse.user)/$(_slugify <<< "$name")" "${base_ref}"
}

_git_new_branch_and_commit_from_new_issue() {
  local title="$1"
  local desc="$2"
  _git_new_branch_from_new_issue "${title}" "${desc}"
  git commit -n -m "$(_git_format_commit_message "$(_jira_current_issue_key_or_assigned) ${title}\n\n${desc}")" "${@:3}"
}

_git_new_branch_and_commit() {
  local message="$1"
  _git_new_branch "$(head -n1 <<< "${message}")"
  git commit -n -m "$(_git_format_commit_message "${message}")" "${@:2}"
}

_github() {
  local endpoint="${1}"
  if [[ "${endpoint}" != 'https://api.github.com/'* ]]; then
    endpoint="https://api.github.com/${endpoint}"
  fi
  curl --fail --silent --show-error \
       --header "Authorization: token $(keyring get api github)" \
       --header "Accept: application/vnd.github.groot-preview+json" \
    "${endpoint}" \
    "${@:2}"
}

_github_post() {
  local endpoint="$1"
  local payload="$2"
  curl --fail --silent --show-error -XPOST -H "Authorization: token $(keyring get system github_token)" \
    "https://api.github.com/$endpoint" --data "$payload"
}

_github_search_issues() {
  local query="$1"
  _github search/issues --get --data-urlencode "q=${query}"
}

_github_repos() {
  _github 'user/repos?per_page=200'
}

_github_repo_names() {
  _github_repos | jq -r '.[].full_name'
}

_github_repo_urls() {
  for name in $(_github_repo_names); do
    __github_repo_url "$name"
  done
}

__github_repo_url() {
  local repo="$1"
  local repo_url="https://github.com/$repo"
  echo "<a href=\"$repo_url\">$1</a>"
  echo "<a href=\"$repo_url/issues\">$1 - Issues</a>"
  echo "<a href=\"$repo_url/issues/new\">$1 - New Issues</a>"
  echo "<a href=\"$repo_url/pulls\">$1 - Pull Requests</a>"
  echo "<a href=\"$repo_url/branches\">$1 - Branches</a>"
}

_github_pick_repo() {
  _github_repos \
    | jq -r '.[].git_url' \
    | _fzf "$1"
}

_github_current_branch_pr_number() {
  _github_current_branch_pr \
    | jq -r '.[0].number'
}

_github_current_branch_pr() {
  _github "repos/$(_git_repo)/pulls" \
    --get \
    --data-urlencode head="$(dirname "$(_git_repo)"):$(_git_current_branch)"
}

_github_open_url() {
  open "$(_github_pick_url "$@")"
}

_github_commit_url() {
  local commit="$1"
  echo "https://github.com/$(_git_repo)/commit/${commit}"
}

_github_copy_commit_url() {
  local commit="$1"
  _github_commit_url  "${commit}" \
    | _pbcopy
}

_github_copy_pr_url_for_commit() {
  local commit="$1"
  _github_pull_request_for_commit  "${commit}" \
    | _pbcopy
}

_github_open_commit() {
  local commit="$1"
  open "$(_github_commit_url "${commit}")"
}

_github_open_pr_for_commit() {
  local commit="$1"
  open "$(_github_pull_request_for_commit "${commit}")"
}

_github_pick_url() {
  CACHE_TTL=86400 _cached _github_repo_urls \
    | _fzf "https://github.com//$*"
}

_github_repo_issues() {
  _github "repos/$(_git_repo)/issues" \
    | _github_format_issues
}

_github_issues() {
  _github "issues?assignee=$(_github_user)" \
    | REPO="$(_git_repo)" jq -r \
      '.[] | if (env.REPO == .repository.full_name) then "" else .repository.full_name end + "#\(.number | tostring)-\(.title)"'
}

_github_issues_search() {
  local label="$1"
  _github "search/issues?q=label:$label&per_page=300"
}

_github_involved_issues() {
  _github "search/issues?q=is:open+involves:$(_github_user)+user:$(_github_org)&sort=updated&order=desc&per_page=300" \
    | jq '.items[]'
}

_github_format_issues() {
  jq -r '.[] | ["#" + (.number | tostring), .title] | join("-")'
}

_github_format_issue() {
  jq -r '["#" + (.number | tostring), .title] | join("-")'
}

_github_format_search_issues() {
  jq -r '.items[] | [(.repository_url | sub(".*/"; "")) + "#" + (.number | tostring),
    .title, .state, ([.labels[].name] | join(", ")), .assignee.login] | join("ยก")' \
    | column -s 'ยก' -t
}

_github_user() {
  git config --get github.user
}

_github_team() {
  git config --get github.team
}

_github_org() {
  git config --get github.org
}

_github_repo_assigned_issues() {
  _github "repos/$(_git_repo)/issues?assignee=$(_github_user)" \
    | _github_format_issues
}

_github_create_issue() {
  local title="$1"
  local body="$2"
  local assignee="${3:-$(_github_user)}"
  local labels="${4:-"$(_github_team)"}"
  local payload
  payload="$(jo title="$title" body="$body" assignee="$assignee" labels="$(jo -a $labels)")"
  _github_post "repos/$(_git_repo)/issues" "$payload"
}

_github_new_branch() {
  local title="$1"
  local body="$2"
  _git_new_branch "$(_github_create_issue "$title" "$body" | _github_format_issue)"
}

_github_events() {
  _github "users/$(_github_user)/events/orgs/$(_github_org)?page=[1-9]"
}

_github_open_current_branch() {
  open "https://github.com/$(_git_repo)/tree/$(_git_current_branch)"
}

_github_current_branch_pr_comments() {
  local pr_number="$1"
  if [[ -z "${pr_number}" ]]; then
    pr_number="$(_github_current_branch_pr_number)"
  fi
  _github "repos/$(_git_repo)/pulls/${pr_number}/comments" \
    | jq '.[] | "\(.in_reply_to_id // .id) \(.created_at) \(.user.login)\n\(.body)\n"' \
    | sort \
    | jq -r . \
    | fold -w 64 -s
}

_github_pull_request_for_commit() {
  local commit_hash="$1"
  _github "repos/$(_git_repo)/commits/${commit_hash}/pulls" \
    | jq -r ".[].html_url"
}

_git_root_dir() {
  git rev-parse --show-toplevel
}

_git_switch_worktree() {
  local cur_repo
  cur_repo="$(_git_root_dir)"
  if [[ "${cur_repo}" =~ .*bugfix ]]; then
    cd "${cur_repo//\-bugfix//}" || _error "Failed to switch to '${cur_repo}'"
  else
    new_dir="${cur_repo}-bugfix"
    if [[ ! -d "${new_dir}" ]]; then
      git worktree prune
      git worktree add "${new_dir}" "origin/$(__git_get_main_branch_name)"
    fi
    cd "${new_dir}" || _error "Failed to switch to '${new_dir}'"
  fi
}

_git_commit_individual_files() {
  git diff --name-only \
    | xargs -I{} git commit -m '{}' '{}'
}

_github_subscribe_to_team_repos() {
  local org="$1"
  local team="$2"
  for url in $(_github "orgs/${org}/teams/${team}/repos?per_page=100" |  jq -r '.[] | .subscription_url'); do
    echo $url
    _github "${url}" -X PUT --data '{"subscribed":true}'
  done
}

_github_pr() {
  local reviewers="${1:-$(git config --get github.reviewers)}"
  local message="$(git log --pretty=%B "origin/$(__git_get_main_branch_name)...HEAD"  )"
  gh pr create \
     --title "$(head -n1 <<< "${message}")" \
     --body "$(tail -n +2 <<< "${message}" | _unfill)" \
     --reviewer "${reviewers}" \
     "$@"
}

_git_clone() {
  local repository="$1"
  git clone "${repository}"
  cd "$(basename "${repository}" | sed 's/\.git$//')" \
    || _info 'Failed to change dir...'
}

_git_delete_commit() {
  local commit="$1"
  git rebase --onto "${commit}^" "${commit}"
}

_git_list_files_not_under_source_control() {
  local dir="$1"
  find "${dir}" \( -type d -exec test -d '{}'/.git \; -prune \) -o -print
}

_git_compare_releases() {
  git log -p "$(
    git tag \
      | sort -r \
      | tail -n +2 \
      | fzf --no-sort --prompt 'Pick the older release'
  )..$(
    git tag \
      | sort -r \
      | fzf --no-sort --prompt 'Pick the last release'
  )"
}

_git_copy_last_commit() {
  git log --pretty='%B' HEAD^.. \
    | pbcopy
  _info 'The last commit message is now in your clipboard.'
}

_git_set_upstream() {
  local branch
  branch="$(_git_current_branch)"
  git branch "--set-upstream-to=origin/${branch}" "${branch}"
}

mass-main() {
  mass 'git status && git checkout main && git pull && git pull --tags'
}

mass-prep() {
  local branch="$1"
  if [[ -z "${branch}" ]]; then
    echo 'No branch defined, stopping.'
    return 1
  fi
  mass-main
  mass "git checkout -b '${branch}'"
}

mass-done() {
  local message="$1"
  if [[ -z "${message}" ]]; then
    echo 'No commit message defined, stopping.'
    return 1
  fi
  mass "git commit -n -m '${message}' ."
  mass _git_push_pr_if_commits
}

mass() {
  find . -maxdepth 2 -type d -name '.git' \
    | _mass "$@"
}

_mass() {
  parallel --max-proc 20 '(cd $(dirname {}) && echo "\n=> $PWD <=" &&'" \"$HOME/.bin/env.sh\" $* )"
}
