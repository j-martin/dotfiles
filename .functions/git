#!/usr/bin/env bash

_git_repo() {
  git config --get remote.origin.url \
    | sed 's#https://github.com/##; s#.git$##; s#git@github.com:##'
}

_git_org_name() {
  git config --get remote.origin.url \
    | cut -d/ -f2 \
    | cut -d. -f1
}

_git_repo_name() {
  git config --get remote.origin.url \
    | cut -d/ -f2 \
    | cut -d. -f1
}

_git_current_branch() {
  git symbolic-ref --short -q HEAD
}

_git_current_branch_url() {
  _git_current_branch \
    | sed "s/#/%23/g"
}

_git_filter_issue_key() {
  sed 's/patch-//' \
    | grep -oE '^[A-Z]+-[0-9]+'
}

_git_current_issue_number() {
  _git_current_branch \
    | (_git_filter_issue_key || echo '')
}

_git_pick_branch_no_origin() {
  local filter="$1"
  _git_pick_branch "$filter" \
    | sed 's/origin\///g'
}

_git_pick_unstaged_files() {
  {
    echo '.'
    git diff --name-only
    git ls-files --others --exclude-standard
  } \
    | fzf -1 --multi --literal --query "${1:-}" "${@:2}"
}

_git_command_with_fzf() {
  local command="$1"
  local query="$2"
  if [[ -e "${query}" ]] || [[ -z "${query}" ]] || [[ "${query}" == -* ]]; then
    git "${command}" "${@:2}"
  else
    (
      IFS=$'\n\t'
      git "${command}" $(_git_pick_unstaged_files "${query}") "${@:3}"
    )
  fi
}

_git_extract_commit() {
  local path="$1"
  local ref="${2:-HEAD}"
  git checkout "${ref}" -- "${path}"
  git commit -m 'merge with previous commit' .
  git revert HEAD
}

_git_pick_any_branches() {
  git target_branch --all \
    | sed 's#remotes/origin/##; s#^. ##' \
    | fzf "$@"
}

_git_pick_branch() {
  local filter="$1"
  git for-each-ref \
    --sort=-committerdate refs/heads/ \
    --format='%(HEAD) %(refname:short) - %(objectname:short) - %(contents:subject) - %(authorname) (%(committerdate:relative))' \
    | grep -v '^\*' \
    | fzf --no-sort -q "${filter}" \
    | awk '{print $1}'
}

_git_pick_commit() {
  git log --oneline --all \
    | head -n 100 \
    | _fzf "$1" \
    | _pick_first_col
}

_git_commit_with_issue_key() {
  local message="$1"
  git commit -n -m "$(_git_format_commit_message ${message})" "${@:2}"
}

_git_format_commit_message() {
  fold -w 64 -s <<< "${@}" \
    | sed 's,^ *,,; s, *$,,'
}

_slugify() {
  tr ':' '/' \
    | tr \'' "#,.+^&*()`[]@$%' '-' \
    | sed -E 's/-+/-/g; s/^-//; s/-$//; s#/-#/#g; s#/+#/#g; s#(^[a-z]+)-#\1/#; s#-*/-*#/#g'
}

_git_new_branch_from_commit() {
  # Removing the ] that appears next to the commit hash depending on the operation.
  local object="${1//]/}"
  local title
  title="$(git log --format=%s -n 1 "${object}")"
  _git_new_branch "${title}"
  git cherry-pick "${object}"
}

__git_get_default_branch_name() {
  git symbolic-ref --short refs/remotes/origin/HEAD \
    | sed 's#.*/##'
}

_git_new_branch() {
  local name="$1"
  local target_branch="$2"
  if [[ -z "${target_branch}" ]]; then
    target_branch="HEAD"
  fi

  git fetch 'origin'
  __git_new_branch "$name" "origin/${target_branch}"
}
__git_new_branch() {
  local name="$1"
  local base_ref="${2:-}"
  git checkout -b "$(_slugify <<< "$name")" "${base_ref}"
}

_git_new_branch_and_commit_from_new_issue() {
  local title="$1"
  local desc="$2"
  _git_new_branch_from_new_issue "${title}" "${desc}"
  git commit -n -m "$(_git_format_commit_message "$(_jira_current_issue_key_or_assigned) ${title}\n\n${desc}")" "${@:3}"
}

_git_new_branch_and_commit() {
  local message="$1"
  message="$(sed -E '1 s#http.*/(browse|issues)/([A-Z]+-[0-9]+).*)#\2)#' <<< "${message}")"
  _git_new_branch "$(head -n1 <<< "${message}")"
  git commit -n -m "$(_git_format_commit_message "${message}")" "${@:2}"
}

_github() {
  gh api --method GET "$@"
}

_github_post() {
  local endpoint="$1"
  local payload="$2"
  curl --fail --silent --show-error -XPOST -H "Authorization: Bearer $(keyring get system github_token)" \
    "https://api.github.com/$endpoint" --data "$payload"
}

_github_search_issues() {
  local query="$1"
  gh api "search/issues" --field=q="${query}" --field=per_page=100 --method GET | jq -c '.items[] | {title, html_url}'
}

_gh_pr_bulk() {
  jq .html_url | xargs -n1 gh pr "$@"
}

_github_search_pr() {
  # _github_search_pr 'production'  'review-requested:@me'
  local title="$1"
  local author="${2:-@me}"
  local extra="$3"
  _github_search_issues "author:${author} archived:false state:open type:pr \"${title}\" in:title ${extra}"
}

_github_bulk_pr_action() {
  local payload=$(cat)
  jq --raw-output '"\(.title) \(.html_url)"' <<< "${payload}"

  if ! grep "github.com" <<< "${payload}" > /dev/null 2>&1; then
    _warn 'No PR to approve. Aborting.'
    return
  fi

  while read -r line; do
    local url
    url="$(jq -r '.html_url' <<< "${line}")"
    PAGER=cat gh pr view "${url}"
    PAGER=cat gh pr diff "${url}"
    gum confirm "Run 'gh pr $*' on the PR above?" || continue
    gh pr "$@" "${url}"
  done <<< "${payload}"
}

_github_bulk_approve() {
  local title="$1"
  local author="$2"
  _github_search_pr "${title}" "${author}" "review:required review-requested:@me ${*:3}" \
    | _github_bulk_pr_action review --approve
}

_github_repos() {
  _github 'user/repos?per_page=200'
}

_github_repo_names() {
  _github_repos | jq -r '.[].full_name'
}

_github_repo_urls() {
  for name in $(_github_repo_names); do
    __github_repo_url "$name"
  done
}

__github_repo_url() {
  local repo="$1"
  local repo_url="https://github.com/$repo"
  echo "<a href=\"$repo_url\">$1</a>"
  echo "<a href=\"$repo_url/issues\">$1 - Issues</a>"
  echo "<a href=\"$repo_url/issues/new\">$1 - New Issues</a>"
  echo "<a href=\"$repo_url/pulls\">$1 - Pull Requests</a>"
  echo "<a href=\"$repo_url/branches\">$1 - Branches</a>"
}

_github_pick_repo() {
  _github_repos \
    | jq -r '.[].git_url' \
    | _fzf "$1"
}

_github_current_branch_pr_number() {
  _github_current_branch_pr \
    | jq -r '.[0].number'
}

_github_current_branch_pr() {
  _github "repos/$(_git_repo)/pulls" \
    --method GET \
    --field head="$(dirname "$(_git_repo)"):$(_git_current_branch)"
}

_github_open_url() {
  _safe_open "$(_github_pick_url "$@")"
}

_github_commit_url() {
  local commit="$1"
  echo "https://github.com/$(_git_repo)/commit/${commit}"
}

_github_copy_commit_url() {
  local commit="$1"
  _github_commit_url "${commit}" \
    | _pbcopy
}

_github_copy_pr_url_for_commit() {
  local commit="$1"
  _github_pull_request_for_commit "${commit}" \
    | _pbcopy
}

_github_open_commit() {
  local commit="${1:-$(pbpaste)}"
  _safe_open "$(_github_commit_url "${commit}")"
}

_safe_open() {
  local url="$1"
  if [[ -z "${url}" ]]; then
    _error 'No URL passed as an argument.'
    return 1
  fi
  open "${url}"
}

_github_open_pr_for_commit() {
  local commit="${1:-$(pbpaste)}"
  _safe_open "$(_github_pull_request_for_commit "${commit}")"
}

_github_pick_url() {
  CACHE_TTL=86400 _cached _github_repo_urls \
    | _fzf "https://github.com//$*"
}

_github_repo_issues() {
  _github "repos/$(_git_repo)/issues" \
    | _github_format_issues
}

_github_issues() {
  _github "issues?assignee=$(_github_user)" \
    | REPO="$(_git_repo)" jq -r \
      '.[] | if (env.REPO == .repository.full_name) then "" else .repository.full_name end + "#\(.number | tostring)-\(.title)"'
}

_github_issues_search() {
  local label="$1"
  _github "search/issues?q=label:$label&per_page=300"
}

_github_involved_issues() {
  _github "search/issues?q=is:open+involves:$(_github_user)+user:$(_github_org)&sort=updated&order=desc&per_page=300" \
    | jq '.items[]'
}

_github_format_issues() {
  jq -r '.[] | ["#" + (.number | tostring), .title] | join("-")'
}

_github_format_issue() {
  jq -r '["#" + (.number | tostring), .title] | join("-")'
}

_github_format_search_issues() {
  jq -r '.items[] | [(.repository_url | sub(".*/"; "")) + "#" + (.number | tostring),
    .title, .state, ([.labels[].name] | join(", ")), .assignee.login] | join("ยก")' \
    | column -s 'ยก' -t
}

_github_user() {
  git config --get github.user
}

_github_team() {
  git config --get github.team
}

_github_org() {
  git config --get github.org
}

_github_repo_assigned_issues() {
  _github "repos/$(_git_repo)/issues?assignee=$(_github_user)" \
    | _github_format_issues
}

_github_create_issue() {
  local title="$1"
  local body="$2"
  local assignee="${3:-$(_github_user)}"
  local labels="${4:-"$(_github_team)"}"
  local payload
  payload="$(jo title="$title" body="$body" assignee="$assignee" labels="$(jo -a $labels)")"
  _github_post "repos/$(_git_repo)/issues" "$payload"
}

_github_new_branch() {
  local title="$1"
  local body="$2"
  _git_new_branch "$(_github_create_issue "$title" "$body" | _github_format_issue)"
}

_github_events() {
  _github "users/$(_github_user)/events/orgs/$(_github_org)?page=[1-9]"
}

_github_open_current_branch() {
  _safe_open "https://github.com/$(_git_repo)/tree/$(_git_current_branch)"
}

_github_current_branch_pr_comments() {
  local pr_number="$1"
  if [[ -z "${pr_number}" ]]; then
    pr_number="$(_github_current_branch_pr_number)"
  fi
  _github "repos/$(_git_repo)/pulls/${pr_number}/comments" \
    | jq '.[] | "\(.in_reply_to_id // .id) \(.created_at) \(.user.login)\n\(.body)\n"' \
    | sort \
    | jq -r . \
    | fold -w 64 -s
}

_github_pull_request_for_commit() {
  local commit_hash="$1"
  _github "repos/$(_git_repo)/commits/${commit_hash}/pulls" \
    | jq -r ".[].html_url"
}

_git_root_dir() {
  git rev-parse --show-toplevel
}

_git_switch_worktree() {
  local suffix="${1:-alt}"
  local cur_repo
  cur_repo="$(_git_root_dir)"
  if [[ "${cur_repo}" == *"${suffix}" ]]; then
    cd "${cur_repo//\-${suffix}//}" || _error "Failed to switch to '${cur_repo}'"
  else
    new_dir="${cur_repo}-${suffix}"
    if [[ ! -d "${new_dir}" ]]; then
      git worktree prune
      git worktree add "${new_dir}" "origin/HEAD"
    fi
    cd "${new_dir}" || _error "Failed to switch to '${new_dir}'"
  fi
}

_git_commit_individual_files() {
  git diff --name-only \
    | xargs -I{} git commit -m '{}' '{}'
}

_github_subscribe_to_team_repos() {
  local org="$1"
  local team="$2"
  for url in $(_github "orgs/${org}/teams/${team}/repos?per_page=100" | jq -r '.[] | .subscription_url'); do
    echo $url
    gh api --method PUT "${url}" --data '{"subscribed":true}'
  done
}

__github_pick_run() {
  gh api repos/$(_git_repo)/commits/$(git rev-parse HEAD)/check-runs \
    | jq -r '.check_runs[] | "\(.name)\t\(.status)\t\(.conclusion)\t\(.details_url)"' \
    | grep --invert-match 'gitstream' \
    | fzf --select-1 --exit-0 --query "${query}" \
    | awk -F\t -v pr_number="$(gh pr view $(_git_current_branch) --json number | jq -r .number)" '{print $4 "?pr=" pr_number}'
}

_github_open_check() {
  local query="${1:-}"
  local url=""
  while true; do
    url="$(__github_pick_run)"
    if [[ -n "${url}" ]]; then
      break
    fi
    _info "Waiting for checks to be available..."
    sleep 1
  done
  _safe_open "${url}"
}

_git_get_pr_message() {
  git log --pretty=%B "origin/HEAD...HEAD" \
    | _unfill
}

_github_pr() {
  local message="$(_git_get_pr_message)"
  local body
  body="$(tail -n +2 <<< "${message}")"
  if which _github_pr_body_template > /dev/null 2>&1; then
    body="$(_github_pr_body_template "${body}")"
  fi
  local output
  output="$(mktemp)"

  gh pr create \
    --title "$(head -n1 <<< "${message}")" \
    --body "${body}" \
    "${@}"  2>&1 \
    | tee "${output}"

  local url
  url="$(tail -n1 "${output}")"
  if [[ "${url}" == 'https://github.com'* ]]; then
    _pbcopy <<< "${url}"
    _notify 'PR created. The URL is in the clipboard.'
  else
    _info "The last line was not a URL: ${url}"
  fi
}

_github_pr_with_reviewer() {
  local reviewers="${1:-$(git config --get github.reviewers)}"
  _github_pr \
    --reviewer "${reviewers}" \
    "$@"
}

_git_clone() {
  local repository="$1"
  local src_dir="${HOME}/src"

  if [[ "${repository}" != */* ]]; then
    repository="github.com/${GITHUB_WORK_ORG}/${repository}"
  elif [[ "${repository}" != 'https://'* ]] && [[ "${repository}" != 'github.com'* ]]; then
    repository="github.com/${repository}"
  fi

  local repo_dir
  repo_dir="${src_dir}/$(sed -E "s#https://##; s/\.git$//" <<< "${repository}" \
    | awk 'BEGIN{FS="/"; OFS="/"} {print $1, $2, $3}')"

  local repo
  repo="$(sed -E "s#https://##; s/\.git$//" <<< "${repository}" \
    | awk -F/ '{print "git@" $1 ":" $2 "/" $3}')"

  if [[ ! -d "${repo_dir}" ]]; then
    mkdir -p "$(dirname "${repo_dir}")"
    git clone "$repo" "${repo_dir}" \
      || return
  fi

  cd "${repo_dir}" \
    && _info "Moved to '$PWD'..." \
    || _info 'Failed to change repo_dir...'
  _go_mod_download
}

_git_clone_all_org_repos() {
  local org="${1:-nestoca}"
  for repo in $(gh repo list "${org}" --json name,isArchived --limit 200 \
    | jq --raw-output '.[] | select(.isArchived | not).name'); do
    _git_clone "${repo}"
  done
}

_github_actions_delete_all_runs() {
  # Does not deleting by default
  local workflow="$1"
  gh run list --limit 200 \
    --workflow="${workflow}" \
    --json databaseId \
    | jq '.[].databaseId' \
    | xargs -I{} echo gh run delete {}
}

_git_delete_commit() {
  local commit="$1"
  git rebase --onto "${commit}^" "${commit}"
}

_git_list_files_not_under_source_control() {
  local repo_dir="$1"
  find "${repo_dir}" \( -type d -exec test -d '{}'/.git \; -prune \) -o -print
}

_gh_generate_approve_commands_from_url() {
  pbpaste | sed 's/^/gh pr review --approve /' | _pbcopy
}

_git_compare_releases() {
  git log -p "$(
    git tag \
      | sort -r \
      | tail -n +2 \
      | fzf --no-sort --prompt 'Pick the older release'
  )..$(
    git tag \
      | sort -r \
      | fzf --no-sort --prompt 'Pick the last release'
  )"
}

_git_copy_last_commit() {
  git log --pretty='%B' HEAD^.. \
    | pbcopy
  _info 'The last commit message is now in your clipboard.'
}

_git_set_upstream() {
  local target_branch
  target_branch="$(_git_current_branch)"
  git target_branch "--set-upstream-to=origin/${target_branch}" "${target_branch}"
}

mass-main() {
  mass 'git status && git checkout main && git pull && git pull --tags'
}

mass-prep() {
  local target_branch="$1"
  if [[ -z "${target_branch}" ]]; then
    echo 'No target_branch defined, stopping.'
    return 1
  fi
  mass-main
  mass "git checkout -b '${target_branch}'"
}

mass-done() {
  local message="$1"
  if [[ -z "${message}" ]]; then
    echo 'No commit message defined, stopping.'
    return 1
  fi
  mass "git commit -n -m '${message}' ."
  mass _git_push_pr_if_commits
}

mass() {
  find . -maxdepth 2 -type d -name '.git' \
    | _mass "$@"
}

_mass() {
  parallel --max-proc 2 '(cd $(dirname {}) && echo "\n=> $PWD <=" &&'"  $* )"
}

_git_jira_issue_from_branch() {
  _git_current_branch \
    | sed -E 's#^[a-z]+/([a-zA-Z]+-[0-9]+)/.*#\1#'
}

_git_patch_similar_files() {
  local reference_file="$1"
  local file_pattern="$2"
  for file_path in $(git ls-files "${file_pattern}"); do
    git diff "${reference_file}" | patch --forward --no-backup-if-mismatch "${file_path}"
  done
}

_github_pr_url() {
  gh pr status --json "url" \
    | jq -r ".currentBranch.url"
}

_github_generate_alfred_snippets() {
  gh api "orgs/${GITHUB_WORK_ORG}/members" --paginate | jq -r '.[].login' | while read username; do
    gh api "users/${username}" \
      | jq '{"alfredsnippet" : {"snippet" : .login, "dontautoexpand" : true, "name" : "GitHub \(.name) \(.login)", "keyword" : ""}}' \
      | tee "$HOME/Documents/Alfred.alfredpreferences/snippets/GitHub/github-${username}.json"
  done
}

_github_rate_limit() {
  gh api rate_limit \
    | jq '.rate | {percentUsage: (.used / .limit * 10000 | round /100), reset: (.reset | strftime("%Y-%m-%d %H:%M:%S UTC"))}'
}
